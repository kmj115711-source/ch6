# 두 개의 숫자를 입력받아 곱한 값을
# 반환하는 함수를 작성하고 호출하세요
# 예) 2,5 =>10

def mul(a ,b):
    return a*b

# 함수의 매개변수의 개수에 맞게 입력
result = mul(5, 5)
print('결과:' , mul)  # 25


# 이름을 입력 받아 환영 인사를 출력하는 함수를 작성하세요
# 예 ) '둘리' ->' 둘리님, 환영합니다!'

def welcome(name):
    print(name + "님, 환영합니다!")

welcome('둘리')


# 이름과 인삿말을 받아 '이름+인삿말' 형태의 문자열을
# 출력하는 함수를 작성하세요
# 예 ) '둘리', '안녕하세요' -> '둘리님, 안녕하세요'
# 예 )'또치', 'hi~~' -> '또치님. hi~~'

def fun(name, message):
    # 문자열 연결 방법 : + or f-str
    print(f'{name}님,{message}') 

# 함수 호출
# 함수 이름(입력값), 매개 변수 갯수에 맞춰서 입력값 넣기
fun('둘리', '안녕하세요')


# 두개의 숫자를 입력받아,
# 첫 번째 수에서 두 번째 수까지의 합을 반환하는 함수를 작성하세요
# 예 ) 5,10 => 5+6+7+8+9+10 =45
def h(n1, n2):
    result = 0 
    for i in range(n1, n2 + 1):  
        result = result + i
    return result

sum = h(5, 10)

print("5부터 10까지의 합:", sum)


#두개의 숫자를 입력받아,
# 첫 번째 수에서 두 번째 수를 뺀 결과를 반환하는 함수를 작성하세요
# 단, 첫번째 수가 두번째 수보다 작으면 -999를 반환하세요
# 예 ) 20,10 -> 10
# 예 ) 10,20 ->-999

# 함수 이름 : 내 마음대로 ex)func sub등
# 입력값 : 숫자 두개
# 반환값 : 결과값 반환 (결과=return, 함수를 사용하는 쪽에서 결과처리)

def sub(n1, n2):
    if n1 < n2:
        return -999                                 # 함수 내부에서 return 키워드 여러번 사용가능
    else :                                               # 단, 조건문과 함께 사용할 때만 
       return n1- n2

result1= sub(20,10)
print(f'결과:{result1}')    #10
result2= sub(10,20)
print(f'결과:{result2}')   #-999

